<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Misty Robot Audio Uploader</title>
    <style>
        .hidden { display: none; }
        .upload-status { margin-top: 20px; }
    </style>
</head>

<body>
    <h1>Misty Robot Audio Uploader</h1>
    <label for="robotIp">Misty IP:</label>
    <input type="text" id="robotIp" placeholder="Enter Misty IP">
    <button id="saveIpBtn">Save IP</button><br><br>
    <button id="stayAwakeBtn">Stay Awake</button>
    <span id="stayAwakeStatus" style="color: green;">✅ Misty will stay awake!</span><br><br>
    <input type="file" id="fileInput" multiple>
    <button id="clearAllBtn">Clear All Audio</button><br><br>
    <button id="uploadBtn">Upload Audio Files</button><br><br>
    <div class="upload-status">
        <h3>Upload Status:</h3>
        <div id="uploadMessages"></div>
    </div>
    <script>
    let uploadedFiles = [];
    let failedFiles = [];
    let retryInterval = 5000; // Retry every 5 seconds

    // Save Misty IP
    document.getElementById("saveIpBtn").addEventListener("click", function() {
        const ip = document.getElementById("robotIp").value;
        if (ip) {
            localStorage.setItem("mistyIp", ip);
            alert("Misty IP saved: " + ip);
        }
    });

    // Stay awake button click handler
    document.getElementById("stayAwakeBtn").addEventListener("click", function() {
        const stayAwakeStatus = document.getElementById("stayAwakeStatus");
        stayAwakeStatus.textContent = "✅ Misty will stay awake!";
        stayAwakeStatus.style.color = "green";
    });

    // Clear all audio button click handler
    document.getElementById("clearAllBtn").addEventListener("click", function() {
        // Simulate clearing the files from the robot
        clearAllAudioFiles();
    });

    // Upload button click handler
    document.getElementById("uploadBtn").addEventListener("click", function() {
        const files = document.getElementById("fileInput").files;
        if (files.length > 0) {
            uploadFiles(files);
        } else {
            alert("Please select files to upload.");
        }
    });

    // Function to clear all audio files from Misty (Simulated)
    function clearAllAudioFiles() {
        document.getElementById("uploadMessages").innerHTML += "<p>❌ Failed to clear audio files.</p>";
    }

    // Function to upload files
    function uploadFiles(files) {
        let currentFileIndex = 0;

        function tryUploadFile() {
            if (currentFileIndex < files.length) {
                const file = files[currentFileIndex];
                const fileName = file.name;
                document.getElementById("uploadMessages").innerHTML += `<p>Uploading: ${fileName}</p>`;

                uploadFileToRobot(file).then(success => {
                    if (success) {
                        uploadedFiles.push(fileName);
                        document.getElementById("uploadMessages").innerHTML += `<p>✅ Uploaded: ${fileName}</p>`;
                    } else {
                        failedFiles.push(fileName);
                        document.getElementById("uploadMessages").innerHTML += `<p>❌ Failed: ${fileName} - Unknown error</p>`;
                    }
                    currentFileIndex++;
                    tryUploadFile(); // Move to next file
                });
            } else {
                retryFailedFiles(); // All files have been attempted, retry failed ones
            }
        }

        tryUploadFile(); // Start the upload process
    }

    // Simulate uploading a file to the robot (Replace with actual API call)
    function uploadFileToRobot(file) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const success = Math.random() > 0.2; // 80% chance of success
                resolve(success);
            }, 1000);
        });
    }

    // Function to retry failed uploads
    function retryFailedFiles() {
        if (failedFiles.length > 0) {
            document.getElementById("uploadMessages").innerHTML += `<p>Retrying failed uploads... (${failedFiles.length} files)</p>`;
            setTimeout(() => {
                const failedFilesCopy = [...failedFiles]; // Make a copy to avoid modifying the array while iterating
                failedFiles = []; // Clear the failed files list

                // Retry each failed file
                failedFilesCopy.forEach(fileName => {
                    const file = Array.from(document.getElementById("fileInput").files).find(f => f.name === fileName);
                    if (file) {
                        uploadFileToRobot(file).then(success => {
                            if (success) {
                                uploadedFiles.push(fileName);
                                document.getElementById("uploadMessages").innerHTML += `<p>✅ Uploaded (Retry): ${fileName}</p>`;
                            } else {
                                failedFiles.push(fileName);
                                document.getElementById("uploadMessages").innerHTML += `<p>❌ Failed (Retry): ${fileName} - Unknown error</p>`;
                            }
                        });
                    }
                });

                // If there are still failed files, retry again
                if (failedFiles.length > 0) {
                    retryFailedFiles();
                } else {
                    document.getElementById("uploadMessages").innerHTML += "<p>All files uploaded successfully!</p>";
                }
            }, retryInterval);
        }
    }
    </script>
</body>

</html>